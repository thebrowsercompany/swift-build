trigger:
  batch: yes
  branches:
    include:
      - master
  paths:
    include:
      - .azure/vs2022.yml

pool:
  vmImage: windows-2022

resources:
  repositories:
    - repository: apple/indexstore-db
      endpoint: GitHub
      name: apple/indexstore-db
      ref: refs/heads/main
      type: github
    - repository: apple/llvm-project
      endpoint: GitHub
      name: apple/llvm-project
      ref: refs/heads/stable/20230725
      type: github
    - repository: apple/sourcekit-lsp
      endpoint: GitHub
      name: apple/sourcekit-lsp
      ref: refs/heads/main
      type: github
    - repository: apple/swift
      endpoint: GitHub
      name: apple/swift
      ref: refs/heads/main
      type: github
    - repository: apple/swift-argument-parser
      endpoint: GitHub
      name: apple/swift-argument-parser
      ref: refs/tags/1.2.2
      type: github
    - repository: apple/swift-asn1
      endpoint: GitHub
      name: apple/swift-asn1
      ref: refs/tags/1.0.0
      type: github
    - repository: apple/swift-certificates
      endpoint: GitHub
      name: apple/swift-certificates
      ref: refs/tags/1.0.1
      type: github
    - repository: apple/swift-collections
      endpoint: GitHub
      name: apple/swift-collections
      ref: refs/tags/1.0.5
      type: github
    - repository: apple/swift-cmark
      endpoint: GitHub
      name: apple/swift-cmark
      ref: refs/heads/gfm
      type: github
    - repository: apple/swift-format
      endpoint: GitHub
      name: apple/swift-format
      ref: refs/heads/main
      type: github
    - repository: apple/swift-markdown
      endpoint: GitHub
      name: apple/swift-markdown
      ref: refs/heads/main
      type: github
    - repository: apple/swift-corelibs-libdispatch
      endpoint: GitHub
      name: apple/swift-corelibs-libdispatch
      ref: refs/heads/main
      type: github
    - repository: apple/swift-corelibs-foundation
      endpoint: GitHub
      name: apple/swift-corelibs-foundation
      ref: refs/heads/windows/main
      type: github
    - repository: apple/swift-corelibs-xctest
      endpoint: GitHub
      name: apple/swift-corelibs-xctest
      ref: refs/heads/main
      type: github
    - repository: apple/swift-crypto
      endpoint: GitHub
      name: apple/swift-crypto
      ref: refs/tags/3.0.0
      type: github
    - repository: apple/swift-driver
      endpoint: GitHub
      name: apple/swift-driver
      ref: refs/heads/main
      type: github
    - repository: apple/swift-experimental-string-processing
      endpoint: GitHub
      name: apple/swift-experimental-string-processing
      ref: refs/heads/swift/main
      type: github
    - repository: apple/swift-installer-scripts
      endpoint: GitHub
      name: apple/swift-installer-scripts
      ref: refs/heads/main
      type: github
    - repository: apple/swift-llbuild
      endpoint: GitHub
      name: apple/swift-llbuild
      ref: refs/heads/main
      type: github
    - repository: apple/swift-package-manager
      endpoint: GitHub
      name: apple/swift-package-manager
      ref: refs/heads/main
      type: github
    - repository: apple/swift-system
      endpoint: GitHub
      name: apple/swift-system
      ref: refs/tags/1.2.1
      type: github
    - repository: apple/swift-tools-support-core
      endpoint: GitHub
      name: apple/swift-tools-support-core
      ref: refs/heads/main
      type: github
    - repository: curl/curl
      endpoint: GitHub
      name: curl/curl
      ref: refs/tags/curl-8_4_0
      type: github
    - repository: gnome/libxml2
      endpoint: GitHub
      name: gnome/libxml2
      ref: refs/tags/v2.11.5
      type: github
    - repository: jpsim/Yams
      endpoint: GitHub
      name: jpsim/Yams
      ref: refs/heads/main
      type: github
    - repository: madler/zlib
      endpoint: GitHub
      name: madler/zlib
      ref: refs/tags/v1.3
      type: github
    - repository: unicode-org/icu
      endpoint: GitHub
      name: unicode-org/icu
      ref: refs/heads/maint/maint-69
      type: github
    - repository: apple/swift-syntax
      endpoint: GitHub
      name: apple/swift-syntax
      ref: refs/heads/main
      type: github

parameters:
  - name: ProductVersion
    type: string
    default: '0.0.0'

  - name: BuildTag
    type: string
    default: ''

  - name: PythonVersion
    type: string
    default: '3.9.10'

stages:
  - stage: cmark_gfm
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x86_64
            'arm64':
              arch: arm64
              platform: aarch64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
            displayName: Configure git
          - checkout: apple/swift-cmark
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
            displayName: Find VS
          - task: BatchScript@1
            displayName: Setup VS Environment
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            displayName: Configure cmark-gfm
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/cmark-gfm-0.29.0.gfm.13
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_COMPILER_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/cmark-gfm-0.29.0.gfm.13/usr
                -D CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP=YES
                -S $(Build.SourcesDirectory)
                -G Ninja
          - task: CMake@1
            displayName: Build cmark-gfm
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/cmark-gfm-0.29.0.gfm.13
          - task: CMake@1
            displayName: Install cmark-gfm
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/cmark-gfm-0.29.0.gfm.13 --target install
          - publish: $(Build.StagingDirectory)/Library/cmark-gfm-0.29.0.gfm.13
            artifact: cmark-gfm-$(arch)-0.29.0.gfm.13
            displayName: Upload cmark-gfm

  - stage: tools
    dependsOn: [cmark_gfm]
    jobs:
      - job: x64
        steps:
          - download: current
            artifact: cmark-gfm-amd64-0.29.0.gfm.13
            displayName: Download cmark-gfm
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/0
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D cmark-gfm_DIR=$(Pipeline.Workspace)/cmark-gfm-amd64-0.29.0.gfm.13/usr/lib/cmake
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D LLVM_ENABLE_ASSERTIONS=NO
                -D LLVM_ENABLE_LIBEDIT=NO
                -D LLVM_ENABLE_LIBXML2=NO
                -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lldb"
                -D LLVM_EXTERNAL_PROJECTS="swift"
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -D LLDB_ENABLE_PYTHON=NO
                -D LLDB_INCLUDE_TESTS=NO
                -D LLDB_ENABLE_SWIFT_SUPPORT=NO
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO
                -D SWIFT_BUILD_HOST_DISPATCH=NO
                -D SWIFT_BUILD_LIBEXEC=NO
                -D SWIFT_BUILD_REGEX_PARSER_IN_COMPILER=NO
                -D SWIFT_BUILD_REMOTE_MIRROR=NO
                -D SWIFT_BUILD_STATIC_SDK_OVERLAY=NO
                -D SWIFT_BUILD_STATIC_STDLIB=NO
                -D SWIFT_BUILD_SWIFT_SYNTAX=NO
                -D SWIFT_ENABLE_DISPATCH=NO
                -D SWIFT_INCLUDE_APINOTES=NO
                -D SWIFT_INCLUDE_DOCS=NO
                -D SWIFT_INCLUDE_TESTS=NO
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target llvm-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target clang-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target lldb-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target llvm-config
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target clang-pseudo-gen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target clang-tidy-confusable-chars-gen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target swift-def-to-strings-converter
          - task: CMake@1
            inputs:
             cmakeArgs:
               --build $(Agent.BuildDirectory)/0 --target swift-serialize-diagnostics
          - task: CMake@1
            inputs:
             cmakeArgs:
               --build $(Agent.BuildDirectory)/0 --target swift-compatibility-symbols
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Agent.BuildDirectory)/0
              Contents: |
                bin/llvm-tblgen.exe
                bin/clang-tblgen.exe
                bin/lldb-tblgen.exe
                bin/llvm-config.exe
                bin/clang-pseudo-gen.exe
                bin/clang-tidy-confusable-chars-gen.exe
                bin/swift-def-to-strings-converter.exe
                bin/swift-serialize-diagnostics.exe
                bin/swift-compatibility-symbols.exe
              TargetFolder: $(Build.StagingDirectory)/build-tools
          - publish: $(Build.StagingDirectory)/build-tools
            artifact: build-tools

  - stage: toolchain
    dependsOn: [tools, cmark_gfm]
    jobs:
      - job: build
        timeoutInMinutes: 0
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x86_64
              EXTRA_CMAKE_ARGS:
            'arm64':
              arch: arm64
              platform: aarch64
              EXTRA_CMAKE_ARGS: -D CMAKE_SYSTEM_NAME=Windows -D CMAKE_SYSTEM_PROCESSOR=ARM64
        steps:
          - download: current
            artifact: build-tools
          - download: current
            artifact: cmark-gfm-$(arch)-0.29.0.gfm.13
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: apple/swift-experimental-string-processing
            fetchDepth: 1
          - checkout: apple/swift-syntax
            fetchDepth: 1
          - checkout: apple/swift-corelibs-libdispatch
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "${{ parameters.PythonVersion }}"
              addToPath: true
              architecture: 'x64'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                nuget install pythonarm64 -Version ${{ parameters.PythonVersion }}
                echo "##vso[task.setvariable variable=PYTHON_ROOT;]${PWD}\pythonarm64.${{ parameters.PythonVersion }}\tools"
                (Get-Content $(Build.SourcesDirectory)/swift/cmake/caches/Windows-aarch64.cmake).replace(' runtimes', '') | Set-Content $(Build.SourcesDirectory)/swift/cmake/caches/Windows-aarch64.cmake
            condition: and(succeeded(), eq(variables['platform'], 'aarch64'))
          - script: |
              CALL :where python.exe PYTHON_EXECUTABLE
              FOR /F "tokens=* USEBACKQ" %%i IN (`cygpath -m "%PYTHON_EXECUTABLE%"`) DO (
                SET PYTHON_EXECUTABLE=%%i
              )
              ECHO PYTHON_EXECUTABLE=%PYTHON_EXECUTABLE%
              @echo ##vso[task.setvariable variable=PYTHON_EXECUTABLE;]%PYTHON_EXECUTABLE%

              IF DEFINED PYTHON_ROOT (
                echo PYTHON_ROOT is already set to %PYTHON_ROOT%
                goto :eof
              )

              CALL :getpath "%PYTHON_EXECUTABLE%" PYTHON_ROOT
              FOR /F "tokens=* USEBACKQ" %%i IN (`cygpath -m "%PYTHON_ROOT%\"`) DO (
                SET PYTHON_ROOT=%%i
              )
              ECHO PYTHON_ROOT=%PYTHON_ROOT%
              @echo ##vso[task.setvariable variable=PYTHON_ROOT;]%PYTHON_ROOT%
              GOTO :eof

              :where
              SET %2=%~$PATH:1
              EXIT /b

              :getpath
              SET %2=%~dp1
              EXIT /b
            displayName: Find Python
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $ToolchainsPath = "$(Build.BinariesDirectory)\toolchains"
                $PinnedToolchainPath = "$ToolchainsPath\20231016.0"
                Write-Host "##vso[task.prependpath]$PinnedToolchainPath\rtl"
                if (Test-Path "$PinnedToolchainPath\LocalApp\Programs\Swift\Toolchains\0.0.0+Asserts\usr\bin\swiftc.exe") {
                  Write-Output "Found Swift at $PinnedToolchainPath"
                  return
                }
                Write-Output "Swift toolchain not found"
                $WiXVersion = "4.0.1"
                $WiXPath = "$(Build.BinariesDirectory)\wix-$WiXVersion"
                if (-not (Test-Path "$WiXPath\tools\net6.0\any\wix.exe")) {
                  Write-Output "WiX $WiXVersion not found"
                  $WiXDownloadURL = "https://www.nuget.org/api/v2/package/wix/$WiXVersion"
                  if (-not (Test-Path "$WiXPath.zip")) {
                    Write-Output "Downloading $WiXDownloadURL"
                    (New-Object Net.WebClient).DownloadFile("$WiXDownloadURL", "$WiXPath.zip")
                  }
                  Write-Output "Extracting wix-$WiXVersion.zip"
                  New-Item -ItemType Directory -ErrorAction Ignore $WiXPath | Out-Null
                  Expand-Archive -Path "$WiXPath.zip" -Destination $WiXPath -Force
                }
                New-Item -ItemType Directory -ErrorAction Ignore "$ToolchainsPath" | Out-Null
                if (-not (Test-Path "$PinnedToolchainPath.exe")) {
                  $SwiftDownloadURL = "https://github.com/thebrowsercompany/swift-build/releases/download/20231016.0/installer-amd64.exe"
                  Write-Output "Downloading $SwiftDownloadURL"
                  (New-Object Net.WebClient).DownloadFile("$SwiftDownloadURL", "$PinnedToolchainPath.exe")
                }
                Write-Output "Extracting Swift..."
                & $WixPath\tools\net6.0\any\wix.exe burn extract "$PinnedToolchainPath.exe" -out "$PinnedToolchainPath\installer" -outba "$PinnedToolchainPath\installer"
                Write-Output "Installing Swift Build Tools..."
                Start-Process msiexec.exe -NoNewWindow -ArgumentList "/qn /a ""$PinnedToolchainPath\installer\WixAttachedContainer\bld.msi"" TARGETDIR=""$PinnedToolchainPath""" -Wait
                Write-Output "Installing Swift Command Line Tools..."
                Start-Process msiexec.exe -NoNewWindow -ArgumentList "/qn /a ""$PinnedToolchainPath\installer\WixAttachedContainer\cli.msi"" TARGETDIR=""$PinnedToolchainPath""" -Wait
                Write-Output "Installing Swift Windows Utilities (AMD64)..."
                Start-Process msiexec.exe -NoNewWindow -ArgumentList "/qn /a ""$PinnedToolchainPath\installer\WixAttachedContainer\rtl.msi"" TARGETDIR=""$PinnedToolchainPath\rtl""" -Wait
                Write-Output "Installing Swift Windows SDK (AMD64)..."
                Start-Process msiexec.exe -NoNewWindow -ArgumentList "/qn /a ""$PinnedToolchainPath\installer\WixAttachedContainer\sdk.amd64.msi"" TARGETDIR=""$PinnedToolchainPath""" -Wait
                Write-Output "Installing Swift Windows SDK (ARM64)..."
                Start-Process msiexec.exe -NoNewWindow -ArgumentList "/qn /a ""$PinnedToolchainPath\installer\WixAttachedContainer\sdk.arm64.msi"" TARGETDIR=""$PinnedToolchainPath""" -Wait
                Write-Output "Cleaning up..."
                Remove-Item "$WiXPath" -Force -Recurse
                Remove-Item "$WiXPath.zip"
                Remove-Item "$PinnedToolchainPath\installer" -Force -Recurse
                Remove-Item "$PinnedToolchainPath.exe"
          - task: PowerShell@2
            name: workspace
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=binaries;isOutput=true]$(cygpath -m '$(Build.BinariesDirectory)')"
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/1
                -C $(Build.SourcesDirectory)/swift/cmake/caches/Windows-$(platform).cmake
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_Swift_COMPILER=$(workspace.binaries)/toolchains/20231016.0/LocalApp/Programs/Swift/Toolchains/0.0.0+Asserts/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(workspace.binaries)/toolchains/20231016.0/LocalApp/Programs/Swift/Platforms/0.0.0/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D CLANG_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/clang-tblgen.exe
                -D CLANG_TIDY_CONFUSABLE_CHARS_GEN=$(Pipeline.Workspace)/build-tools/bin/clang-tidy-confusable-chars-gen.exe
                -D LLDB_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/lldb-tblgen.exe
                -D LLVM_CONFIG_PATH=$(Pipeline.Workspace)/build-tools/bin/llvm-config.exe
                -D LLVM_ENABLE_PDB=NO
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -D LLVM_NATIVE_TOOL_DIR=$(Pipeline.Workspace)/build-tools/bin
                -D LLVM_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/llvm-tblgen.exe
                -D LLVM_USE_HOST_TOOLS=NO
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO
                -D SWIFT_BUILD_REMOTE_MIRROR=NO
                -D SWIFT_BUILD_SWIFT_SYNTAX=YES
                -D SWIFT_CLANG_LOCATION=$(workspace.binaries)/toolchains/20231016.0/LocalApp/Programs/Swift/Toolchains/0.0.0+Asserts/usr/bin
                -D SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_CXX_INTEROP=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_OBSERVATION=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_STRING_PROCESSING=YES
                -D SWIFT_ENABLE_SYNCHRONIZATION=YES
                -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=$(Pipeline.Workspace)/build-tools/bin
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE=$(Build.SourcesDirectory)/swift-syntax
                -D SWIFT_PATH_TO_STRING_PROCESSING_SOURCE=$(Build.SourcesDirectory)/swift-experimental-string-processing
                -D SWIFT_PATH_TO_SWIFT_SDK=$(workspace.binaries)/toolchains/20231016.0/LocalApp/Programs/Swift/Platforms/0.0.0/Windows.platform/Developer/SDKs/Windows.sdk
                -D CLANG_VENDOR=compnerd.org
                -D CLANG_VENDOR_UTI=org.compnerd.dt
                -D cmark-gfm_DIR=$(Pipeline.Workspace)/cmark-gfm-$(arch)-0.29.0.gfm.13/usr/lib/cmake
                -D PACKAGE_VENDOR=compnerd.org
                -D SWIFT_VENDOR=compnerd.org
                -D LLVM_PARALLEL_LINK_JOBS=2
                -D SWIFT_PARALLEL_LINK_JOBS=2
                -D LLVM_APPEND_VC_REV=NO
                -D LLVM_VERSION_SUFFIX=""
                -D LLDB_PYTHON_EXE_RELATIVE_PATH=python.exe
                -D LLDB_PYTHON_EXT_SUFFIX=.pyd
                -D LLDB_PYTHON_RELATIVE_PATH=lib/site-packages
                -D Python3_ROOT_DIR="$(PYTHON_ROOT)"
                -D Python3_EXECUTABLE="$(PYTHON_EXECUTABLE)"
                -D Python3_INCLUDE_DIR="$(PYTHON_ROOT)/include"
                -D Python3_LIBRARY="$(PYTHON_ROOT)/libs/python39.lib"
                $(EXTRA_CMAKE_ARGS)
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/1 --target distribution
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Free some space for install step
                Get-ChildItem $(Agent.BuildDirectory)\1\*.obj -File -Recurse | ForEach-Object {
                  $CreationTime = $_.CreationTime
                  $LastAccessTime = $_.LastAccessTime
                  $LastWriteTime = $_.LastWriteTime
                  Set-Content -Path $_.FullName -Force -Value "!"
                  $_.CreationTime = $CreationTime
                  $_.LastAccessTime = $LastAccessTime
                  $_.LastWriteTime = $LastWriteTime
                }
            condition: and(succeeded(), or(contains(variables['Agent.Name'], 'Azure'), eq(variables['Agent.Name'], 'Hosted Agent')))
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/1 --target install-distribution-stripped
          - publish: $(Build.StagingDirectory)
            artifact: toolchain-$(arch)
          - publish: $(Build.BinariesDirectory)/toolchains/20231016.0/rtl
            artifact: pinned-toolchain-runtime
            condition: and(succeeded(), eq(variables['platform'], 'x86_64'))
          - task: PowerShell@2
            displayName: Extract swift-syntax
            inputs:
              targetType: 'inline'
              script: |
                $module = "$(Agent.BuildDirectory)/1/cmake/modules/SwiftSyntaxConfig.cmake"
                $bindir = cygpath -m $(Agent.BuildDirectory)/1
                (Get-Content $module).Replace("${bindir}", '<BINARY_DIR>') | Set-Content $module
                New-Item -Path $(Build.StagingDirectory)/swift-syntax/lib/swift/host -ItemType Directory | Out-Null
                Copy-Item -Path "$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/lib/*.lib" -Destination "$(Build.StagingDirectory)/swift-syntax/lib"
                Copy-Item -Path "$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/lib/*.lib" -Destination "$(Build.StagingDirectory)/swift-syntax/lib/swift/host"
                Copy-Item -Path "$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/lib/swift/host/*.swiftmodule" -Destination "$(Build.StagingDirectory)/swift-syntax/lib/swift/host" -Recurse
                New-Item -Path $(Build.StagingDirectory)/swift-syntax/cmake/modules -ItemType Directory | Out-Null
                Copy-Item -Path $module -Destination "$(Build.StagingDirectory)/swift-syntax/cmake/modules"
          - publish: $(Build.StagingDirectory)/swift-syntax
            artifact: swift-syntax-$(arch)

  - stage: icu
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
              BUILD_TOOLS: YES
            'x64':
              arch: amd64
              BUILD_TOOLS: YES
            'arm64':
              arch: arm64
              BUILD_TOOLS: NO
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - checkout: unicode-org/icu
            fetchDepth: 1
          - script: |
              copy $(Build.SourcesDirectory)\swift-installer-scripts\shared\ICU\CMakeLists.txt $(Build.SourcesDirectory)\icu\icu4c\CMakeLists.txt
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
            condition: and(succeeded(), eq(variables['BUILD_TOOLS'], 'NO'))
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/icu-69.1-build
                -D BUILD_SHARED_LIBS=NO
                -D BUILD_TOOLS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/icu-69.1/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/icu/icu4c
            condition: and(succeeded(), eq(variables['BUILD_TOOLS'], 'NO'))
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1-build
            condition: and(succeeded(), eq(variables['BUILD_TOOLS'], 'NO'))
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/icu-69.1
                -D BUILD_SHARED_LIBS=NO
                -D ICU_TOOLS_DIR=$(Agent.BuildDirectory)/icu-69.1-build
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/icu-69.1/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/icu/icu4c
            condition: and(succeeded(), eq(variables['BUILD_TOOLS'], 'NO'))
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/icu-69.1
                -D BUILD_SHARED_LIBS=NO
                -D BUILD_TOOLS=$(BUILD_TOOLS)
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/icu-69.1/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/icu/icu4c
            condition: and(succeeded(), eq(variables['BUILD_TOOLS'], 'YES'))
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1 --target install
          - publish: $(Build.StagingDirectory)
            artifact: icu-$(arch)-69.1

  - stage: zlib
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: madler/zlib
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/zlib-1.3
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/zlib-1.3/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D SKIP_INSTALL_FILES=YES
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/zlib-1.3
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/zlib-1.3 --target install
          - publish: $(Build.StagingDirectory)
            artifact: zlib-$(arch)-1.3

  - stage: curl
    dependsOn: [zlib]
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - download: current
            artifact: zlib-$(arch)-1.3
          - checkout: curl/curl
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/curl-8.4.0
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/curl-8.4.0/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D BUILD_TESTING=NO
                -D BUILD_CURL_EXE=NO
                -D CURL_CA_BUNDLE="none"
                -D CURL_CA_FALLBACK=NO
                -D CURL_CA_PATH="none"
                -D CURL_BROTLI=NO
                -D CURL_DISABLE_ALTSVC=NO
                -D CURL_DISABLE_AWS=YES
                -D CURL_DISABLE_BASIC_AUTH=NO
                -D CURL_DISABLE_BEARER_AUTH=NO
                -D CURL_DISABLE_COOKIES=NO
                -D CURL_DISABLE_DICT=YES
                -D CURL_DISABLE_DIGEST_AUTH=NO
                -D CURL_DISABLE_DOH=NO
                -D CURL_DISABLE_FILE=YES
                -D CURL_DISABLE_FORM_API=NO
                -D CURL_DISABLE_FTP=YES
                -D CURL_DISABLE_GETOPTIONS=NO
                -D CURL_DISABLE_GOPHER=YES
                -D CURL_DISABLE_HSTS=NO
                -D CURL_DISABLE_HTTP=NO
                -D CURL_DISABLE_HTTP_AUTH=NO
                -D CURL_DISABLE_IMAP=YES
                -D CURL_DISABLE_KERBEROS_AUTH=NO
                -D CURL_DISABLE_LDAP=YES
                -D CURL_DISABLE_LDAPS=YES
                -D CURL_DISABLE_MIME=NO
                -D CURL_DISABLE_MQTT=YES
                -D CURL_DISABLE_NEGOTIATE_AUTH=NO
                -D CURL_DISABLE_NETRC=NO
                -D CURL_DISABLE_NTLM=NO
                -D CURL_DISABLE_PARSEDATE=NO
                -D CURL_DISABLE_POP3=YES
                -D CURL_DISABLE_PROGRESS_METER=YES
                -D CURL_DISABLE_PROXY=NO
                -D CURL_DISABLE_RTSP=YES
                -D CURL_DISABLE_SHUFFLE_DNS=YES
                -D CURL_DISABLE_SMB=YES
                -D CURL_DISABLE_SMTP=YES
                -D CURL_DISABLE_SOCKETPAIR=YES
                -D CURL_DISABLE_SRP=NO
                -D CURL_DISABLE_TELNET=YES
                -D CURL_DISABLE_TFTP=YES
                -D CURL_DISABLE_VERBOSE_STRINGS=NO
                -D CURL_LTO=NO
                -D CURL_USE_BEARSSL=NO
                -D CURL_USE_GNUTLS=NO
                -D CURL_USE_GSSAPI=NO
                -D CURL_USE_LIBPSL=NO
                -D CURL_USE_LIBSSH=NO
                -D CURL_USE_LIBSSH2=NO
                -D CURL_USE_MBEDTLS=NO
                -D CURL_USE_OPENSSL=NO
                -D CURL_USE_SCHANNEL=YES
                -D CURL_USE_WOLFSSL=NO
                -D CURL_WINDOWS_SSPI=YES
                -D CURL_ZLIB=YES
                -D CURL_ZSTD=NO
                -D ENABLE_ARES=NO
                -D ENABLE_CURLDEBUG=NO
                -D ENABLE_DEBUG=NO
                -D ENABLE_IPV6=YES
                -D ENABLE_MANUAL=NO
                -D ENABLE_THREADED_RESOLVER=NO
                -D ENABLE_UNICODE=YES
                -D ENABLE_UNIX_SOCKETS=NO
                -D ENABLE_WEBSOCKETS=NO
                -D HAVE_POLL_FINE=NO
                -D USE_IDN2=NO
                -D USE_MSH3=NO
                -D USE_NGHTTP2=NO
                -D USE_NGTCP2=NO
                -D USE_QUICHE=NO
                -D USE_WIN32_IDN=YES
                -D USE_WIN32_LARGE_FILES=YES
                -D USE_WIN32_LDAP=NO
                -D ZLIB_ROOT=$(Pipeline.Workspace)/zlib-$(arch)-1.3/Library/zlib-1.3/usr
                -D ZLIB_LIBRARY=$(Pipeline.Workspace)/zlib-$(arch)-1.3/Library/zlib-1.3/usr/lib/zlibstatic.lib
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/curl-8.4.0
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/curl-8.4.0 --target install
          - publish: $(Build.StagingDirectory)
            artifact: curl-$(arch)-8.4.0

  - stage: sqlite
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: self
            fetchDepth: 1
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                curl.exe -sL "https://sqlite.org/2023/sqlite-amalgamation-3430200.zip" -o $env:TEMP\sqlite-amalgamation-3430200.zip
                New-Item -ItemType Directory -Path $(Build.SourcesDirectory)\sqlite-3.43.2
                unzip.exe -j -o $env:TEMP\sqlite-amalgamation-3430200.zip -d $(Build.SourcesDirectory)\sqlite-3.43.2
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Build.SourcesDirectory)/cmake/SQLite
              Contents: |
                CMakeLists.txt
              TargetFolder: $(Build.SourcesDirectory)/sqlite-3.43.2
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/sqlite-3.43.2
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/sqlite-3.43.2/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/sqlite-3.43.2
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sqlite-3.43.2
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sqlite-3.43.2 --target install
          - publish: $(Build.StagingDirectory)
            artifact: sqlite-$(arch)-3.43.2

  - stage: libxml2
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: gnome/libxml2
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/libxml2-2.11.5
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPLER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/libxml2-2.11.5/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D LIBXML2_WITH_ICONV=NO
                -D LIBXML2_WITH_ICU=NO
                -D LIBXML2_WITH_LZMA=NO
                -D LIBXML2_WITH_PYTHON=NO
                -D LIBXML2_WITH_TESTS=NO
                -D LIBXML2_WITH_THREADS=YES
                -D LIBXML2_WITH_ZLIB=NO
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libxml2-2.11.5
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libxml2-2.11.5 --target install
          - publish: $(Build.StagingDirectory)
            artifact: libxml2-$(arch)-2.11.5

  - stage: sdk
    dependsOn: [icu, libxml2, curl, zlib, toolchain, cmark_gfm]
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
              platform: i686
            'x64':
              arch: amd64
              platform: x86_64
            'arm64':
              arch: arm64
              platform: aarch64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - download: current
            artifact: icu-$(arch)-69.1
          - download: current
            artifact: libxml2-$(arch)-2.11.5
          - download: current
            artifact: curl-$(arch)-8.4.0
          - download: current
            artifact: zlib-$(arch)-1.3
          - download: current
            artifact: toolchain-amd64
          - download: current
            artifact: pinned-toolchain-runtime
          - download: current
            artifact: cmark-gfm-amd64-0.29.0.gfm.13
          - task: PowerShell@2
            displayName: cmark-gfm Setup 
            inputs:
              targetType: 'inline'
              script: |
                Copy-Item $(Pipeline.Workspace)/cmark-gfm-amd64-0.29.0.gfm.13/usr/bin/*.dll $(Pipeline.Workspace)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: apple/swift-corelibs-libdispatch
            fetchDepth: 1
          - checkout: apple/swift-corelibs-foundation
            fetchDepth: 1
          - checkout: apple/swift-corelibs-xctest
            fetchDepth: 1
          - checkout: apple/swift-experimental-string-processing
            fetchDepth: 1
          - checkout: apple/swift-syntax
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - bash: |
              echo "##vso[task.setvariable variable=root;isOutput=true]$(cygpath -m '$(Pipeline.Workspace)')"
            name: workspace
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.prependpath]$(Agent.BuildDirectory)\pinned-toolchain-runtime"
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/llvm
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(arch)
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D LLVM_ENABLE_ASSERTIONS=YES
          - task: CMake@1
            inputs:
             cmakeArgs:
                -B $(Agent.BuildDirectory)/swift
                -C $(Build.SourcesDirectory)/swift/cmake/caches/Runtime-Windows-$(platform).cmake
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D MSVC_C_ARCHITECTURE_ID=$(arch)
                -D MSVC_CXX_ARCHITECTURE_ID=$(arch)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift
                -D LLVM_DIR=$(Agent.BuildDirectory)/llvm/lib/cmake/llvm
                -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=$(Workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D SWIFT_PATH_TO_STRING_PROCESSING_SOURCE=$(Build.SourcesDirectory)/swift-experimental-string-processing
                -D SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_CXX_INTEROP=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_OBSERVATION=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_STRING_PROCESSING=YES
                -D SWIFT_ENABLE_SYNCHRONIZATION=YES
                -D EXPERIMENTAL_STRING_PROCESSING_SOURCE_DIR=$(Build.SourcesDirectory)/swift-experimental-string-processing
                -D SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE=$(Build.SourcesDirectory)/swift-syntax
                -D SWIFT_PARALLEL_LINK_JOBS=2
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift --target install
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=PATH;]$(Agent.BuildDirectory)\swift\bin;${env:Path}"
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/libdispatch
                -D BUILD_SHARED_LIBS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_FLAGS="-resource-dir $(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows -vfsoverlay $(Agent.BuildDirectory)/swift/stdlib/windows-vfs-overlay.yaml -strict-implicit-module-context -Xcc -Xclang -Xcc -fbuiltin-headers-in-system-modules"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D BUILD_TESTING=NO
                -D ENABLE_SWIFT=YES
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libdispatch
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=PATH;]$(Agent.BuildDirectory)\libdispatch;${env:Path}"
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/foundation
                -D BUILD_SHARED_LIBS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_ASM_COMPILE_OPTIONS_MSVC_RUNTIME_LIBRARY_MultiThreadedDLL="/MD"
                -D CMAKE_ASM_FLAGS="--target=$(platform)-unknown-windows-msvc"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -D MSVC_C_ARCHITECTURE_ID=$(arch)
                -D MSVC_CXX_ARCHITECTURE_ID=$(arch)
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_FLAGS="-resource-dir $(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows -vfsoverlay $(Agent.BuildDirectory)/swift/stdlib/windows-vfs-overlay.yaml -strict-implicit-module-context -Xcc -Xclang -Xcc -fbuiltin-headers-in-system-modules"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-corelibs-foundation
                -D ENABLE_TESTING=NO
                -D dispatch_DIR=$(Agent.BuildDirectory)/libdispatch/cmake/modules
                -D ICU_ROOT=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr
                -D ICU_DATA_LIBRARY_RELEASE=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/lib/sicudt69.lib
                -D ICU_UC_LIBRARY_RELEASE=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/lib/sicuuc69.lib
                -D ICU_I18N_LIBRARY_RELEASE=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/lib/sicuin69.lib
                -D LIBXML2_DEFINITIONS="/DLIBXML_STATIC"
                -D LIBXML2_LIBRARY=$(Pipeline.Workspace)/libxml2-$(arch)-2.11.5/Library/libxml2-2.11.5/usr/lib/libxml2s.lib
                -D LIBXML2_INCLUDE_DIR=$(Pipeline.Workspace)/libxml2-$(arch)-2.11.5/Library/libxml2-2.11.5/usr/include/libxml2
                -D CURL_DIR=$(Pipeline.Workspace)/curl-$(arch)-8.4.0/Library/curl-8.4.0/usr/lib/cmake/CURL
                -D ZLIB_ROOT=$(Pipeline.Workspace)/zlib-$(arch)-1.3/Library/zlib-1.3/usr
                -D ZLIB_LIBRARY=$(Pipeline.Workspace)/zlib-$(arch)-1.3/Library/zlib-1.3/usr/lib/zlibstatic.lib
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/foundation
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=PATH;]$(Agent.BuildDirectory)\foundation\bin;${env:Path}"
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/xctest
                -D BUILD_SHARED_LIBS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_FLAGS="-resource-dir $(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows -vfsoverlay $(Agent.BuildDirectory)/swift/stdlib/windows-vfs-overlay.yaml -strict-implicit-module-context -Xcc -Xclang -Xcc -fbuiltin-headers-in-system-modules"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-corelibs-xctest
                -D ENABLE_TESTING=NO
                -D dispatch_DIR=$(Agent.BuildDirectory)/libdispatch/cmake/modules
                -D Foundation_DIR=$(Agent.BuildDirectory)/foundation/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/xctest
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/xctest --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/foundation --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libdispatch --target install
          - task: PythonScript@0
            inputs:
              scriptSource: inline
              script: |
                import os
                import plistlib

                info_plist = r'$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Info.plist'
                with open(os.path.normpath(info_plist), 'wb') as plist:
                  # TODO(compnerd) derive this from the install directory
                  plistlib.dump({ 'DefaultProperties': { 'XCTEST_VERSION': 'development', 'SWIFTC_FLAGS': ['-use-ld=lld'] } }, plist)

                sdk_settings_plist = r'$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/SDKSettings.plist'
                with open(os.path.normpath(sdk_settings_plist), 'wb') as plist:
                  # TODO(compnerd) derive this from the CMAKE_BUILD_TYPE for the
                  # runtime.
                  plistlib.dump({ 'DefaultProperties': { 'DEFAULT_USE_RUNTIME': 'MD' } }, plist)
              failOnStderr: true
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Copy-Item $(Agent.BuildDirectory)/swift/stdlib/windows-vfs-overlay.yaml $(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/share
          - publish: $(Build.StagingDirectory)
            artifact: windows-sdk-$(arch)

  - stage: devtools
    dependsOn: [sqlite, toolchain, sdk]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x86_64
            'arm64':
              arch: arm64
              platform: aarch64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - download: current
            artifact: sqlite-$(arch)-3.43.2
          - download: current
            artifact: toolchain-amd64
          - download: current
            artifact: windows-sdk-$(arch)
          - download: current
            artifact: windows-sdk-amd64
            condition: and(succeeded(), ne(variables['arch'], 'amd64'))
          - download: current
            artifact: swift-syntax-$(arch)
            displayName: Download swift-syntax
          - download: current
            artifact: cmark-gfm-$(arch)-0.29.0.gfm.13
            displayName: Download cmark-gfm ($(arch))
          - download: current
            artifact: cmark-gfm-amd64-0.29.0.gfm.13
            displayName: Download cmark-gfm (Host)
            condition: and(succeeded(), ne(variables['arch'], 'amd64'))
          - checkout: apple/indexstore-db
            fetchDepth: 1
          - checkout: apple/sourcekit-lsp
            fetchDepth: 1
          - checkout: apple/swift-argument-parser
            fetchDepth: 1
          - checkout: apple/swift-asn1
            fetchDepth: 1
          - checkout: apple/swift-certificates
            fetchDepth: 1
          - checkout: apple/swift-collections
            fetchDepth: 1
          - checkout: apple/swift-crypto
            fetchDepth: 1
          - checkout: apple/swift-driver
            fetchDepth: 1
          - checkout: apple/swift-llbuild
            fetchDepth: 1
          - checkout: apple/swift-package-manager
            fetchDepth: 1
          - checkout: apple/swift-system
            fetchDepth: 1
          - checkout: apple/swift-tools-support-core
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: jpsim/Yams
            fetchDepth: 1
          - checkout: apple/swift-format
            fetchDepth: 1
          - checkout: apple/swift-markdown
            fetchDepth: 1
          - task: PowerShell@2
            displayName: cmark-gfm Setup 
            inputs:
              targetType: 'inline'
              script: |
                Copy-Item $(Pipeline.Workspace)/cmark-gfm-amd64-0.29.0.gfm.13/usr/bin/*.dll $(Pipeline.Workspace)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: PowerShell@2
            displayName: Restructure SDK
            inputs:
              targetType: 'inline'
              script: |
                $env:SDKROOT="$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                mv ${env:SDKROOT}/usr/lib/swift/dispatch ${env:SDKROOT}/usr/include/
                mv ${env:SDKROOT}/usr/lib/swift/os ${env:SDKROOT}/usr/include/
                mv ${env:SDKROOT}/usr/lib/swift/Block ${env:SDKROOT}/usr/include/
                mv ${env:SDKROOT}/usr/lib/swift/windows/BlocksRuntime.lib ${env:SDKROOT}/usr/lib/swift/windows/$(platform)/
                mv ${env:SDKROOT}/usr/lib/swift/windows/dispatch.lib ${env:SDKROOT}/usr/lib/swift/windows/$(platform)/
                mv ${env:SDKROOT}/usr/lib/swift/windows/swiftDispatch.lib ${env:SDKROOT}/usr/lib/swift/windows/$(platform)/
                mv ${env:SDKROOT}/usr/lib/swift/windows/Foundation.lib ${env:SDKROOT}/usr/lib/swift/windows/$(platform)/
                mv ${env:SDKROOT}/usr/lib/swift/windows/FoundationXML.lib ${env:SDKROOT}/usr/lib/swift/windows/$(platform)/
                mv ${env:SDKROOT}/usr/lib/swift/windows/FoundationNetworking.lib ${env:SDKROOT}/usr/lib/swift/windows/$(platform)/
                Write-Host "##vso[task.prependpath]$(Agent.BuildDirectory)\windows-sdk-amd64\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk\usr\bin"
                Write-Host "##vso[task.setvariable variable=SDKROOT;]${env:SDKROOT}"
          - bash: |
              echo "##vso[task.setvariable variable=root;isOutput=true]$(cygpath -m '$(Pipeline.Workspace)')"
            name: workspace

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-argument-parser
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-argument-parser
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-argument-parser

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-collections
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-collections
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-collections

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-crypto
                -D BUILD_SHARED_LIBS=NO
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-crypto
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-crypto

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/Yams
                -D BUILD_SHARED_LIBS=NO
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/Yams
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/Yams

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-llbuild
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-llbuild
                -D LLBUILD_SUPPORT_BINDINGS=Swift
                -D SQLite3_LIBRARY=$(Pipeline.Workspace)/sqlite-$(arch)-3.43.2/Library/sqlite-3.43.2/usr/lib/SQLite3.lib
                -D SQLite3_INCLUDE_DIR=$(Pipeline.Workspace)/sqlite-$(arch)-3.43.2/Library/sqlite-3.43.2/usr/include
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-llbuild

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-system
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-system
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-system

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-tools-support-core
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-tools-support-core
                -D SwiftSystem_DIR=$(Build.BinariesDirectory)/$(arch)/swift-system/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-tools-support-core

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-driver
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-Xlinker -incremental:no -Xlinker -opt:ref -Xlinker -opt:icf -sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-driver
                -D ArgumentParser_DIR=$(Build.BinariesDirectory)/$(arch)/swift-argument-parser/cmake/modules
                -D LLBuild_DIR=$(Build.BinariesDirectory)/$(arch)/swift-llbuild/cmake/modules
                -D SwiftSystem_DIR=$(Build.BinariesDirectory)/$(arch)/swift-system/cmake/modules
                -D TSC_DIR=$(Build.BinariesDirectory)/$(arch)/swift-tools-support-core/cmake/modules
                -D Yams_DIR=$(Build.BinariesDirectory)/$(arch)/Yams/cmake/modules
                -D SQLite3_LIBRARY=$(Pipeline.Workspace)/sqlite-$(arch)-3.43.2/Library/sqlite-3.43.2/usr/lib/SQLite3.lib
                -D SQLite3_INCLUDE_DIR=$(Pipeline.Workspace)/sqlite-$(arch)-3.43.2/Library/sqlite-3.43.2/usr/include
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-driver

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-asn1
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-asn1
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-asn1

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-certificates
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-certificates
                -D SwiftASN1_DIR=$(Build.BinariesDirectory)/$(arch)/swift-asn1/cmake/modules
                -D SwiftCrypto_DIR=$(Build.BinariesDirectory)/$(arch)/swift-crypto/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-certificates

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-package-manager
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-package-manager
                -D ArgumentParser_DIR=$(Build.BinariesDirectory)/$(arch)/swift-argument-parser/cmake/modules
                -D LLBuild_DIR=$(Build.BinariesDirectory)/$(arch)/swift-llbuild/cmake/modules
                -D SwiftCollections_DIR=$(Build.BinariesDirectory)/$(arch)/swift-collections/cmake/modules
                -D SwiftASN1_DIR=$(Build.BinariesDirectory)/$(arch)/swift-asn1/cmake/modules
                -D SwiftCertificates_DIR=$(Build.BinariesDirectory)/$(arch)/swift-certificates/cmake/modules
                -D SwiftCrypto_DIR=$(Build.BinariesDirectory)/$(arch)/swift-crypto/cmake/modules
                -D SwiftDriver_DIR=$(Build.BinariesDirectory)/$(arch)/swift-driver/cmake/modules
                -D SwiftSystem_DIR=$(Build.BinariesDirectory)/$(arch)/swift-system/cmake/modules
                -D TSC_DIR=$(Build.BinariesDirectory)/$(arch)/swift-tools-support-core/cmake/modules
                -D Yams_DIR=$(Build.BinariesDirectory)/$(arch)/Yams/cmake/modules
                -D SQLite3_LIBRARY=$(Pipeline.Workspace)/sqlite-$(arch)-3.43.2/Library/sqlite-3.43.2/usr/lib/SQLite3.lib
                -D SQLite3_INCLUDE_DIR=$(Pipeline.Workspace)/sqlite-$(arch)-3.43.2/Library/sqlite-3.43.2/usr/include
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-package-manager

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-markdown
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-markdown
                -D ArgumentParser_DIR=$(Build.BinariesDirectory)/$(arch)/swift-argument-parser/cmake/modules
                -D cmark-gfm_DIR=$(Agent.BuildDirectory)/cmark-gfm-$(arch)-0.29.0.gfm.13/usr/lib/cmake
          - task: CMake@1
            displayName: Build swift-markdown
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-markdown

          - task: PowerShell@2
            displayName: Extract swift-syntax
            inputs:
              targetType: 'inline'
              script: |
                $module = "$(Agent.BuildDirectory)/swift-syntax-$(arch)/cmake/modules/SwiftSyntaxConfig.cmake"
                $bindir = cygpath -m $(Agent.BuildDirectory)/swift-syntax-$(arch)
                (Get-Content $module).Replace('<BINARY_DIR>', "${bindir}") | Set-Content $module

          - task: CMake@1
            displayName: Configure swift-format
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/swift-format
                -D BUILD_SHARED_LIBS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-format
                -D ArgumentParser_DIR=$(Build.BinariesDirectory)/$(arch)/swift-argument-parser/cmake/modules
                -D SwiftMarkdown_DIR=$(Build.BinariesDirectory)/$(arch)/swift-markdown/cmake/modules
                -D cmark-gfm_DIR=$(Agent.BuildDirectory)/cmark-gfm-$(arch)-0.29.0.gfm.13/usr/lib/cmake
                -D SwiftSyntax_DIR=$(Agent.BuildDirectory)/swift-syntax-$(arch)/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-format

          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/indexstore-db
                -D BUILD_SHARED_LIBS=NO
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code -I $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/include -I $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/include/Block"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/indexstore-db
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/indexstore-db
          
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Build.BinariesDirectory)/$(arch)/sourcekit-lsp
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TESTING=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_COMPILER_WORKS=YES
                -D CMAKE_Swift_FLAGS="-sdk $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                -D CMAKE_Swift_FLAGS_RELEASE="-O"
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/sourcekit-lsp
                -D ArgumentParser_DIR=$(Build.BinariesDirectory)/$(arch)/swift-argument-parser/cmake/modules
                -D IndexStoreDB_DIR=$(Build.BinariesDirectory)/$(arch)/indexstore-db/cmake/modules
                -D LLBuild_DIR=$(Build.BinariesDirectory)/$(arch)/swift-llbuild/cmake/modules
                -D SwiftCollections_DIR=$(Build.BinariesDirectory)/$(arch)/swift-collections/cmake/modules
                -D SwiftCrypto_DIR=$(Build.BinariesDirectory)/$(arch)/swift-crypto/cmake/modules
                -D SwiftPM_DIR=$(Build.BinariesDirectory)/$(arch)/swift-package-manager/cmake/modules
                -D SwiftSystem_DIR=$(Build.BinariesDirectory)/$(arch)/swift-system/cmake/modules
                -D TSC_DIR=$(Build.BinariesDirectory)/$(arch)/swift-tools-support-core/cmake/modules
                -D SwiftSyntax_DIR=$(Agent.BuildDirectory)/swift-syntax-$(arch)/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/sourcekit-lsp

          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-argument-parser --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-collections --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-llbuild --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-system --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-tools-support-core --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-driver --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-package-manager --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/sourcekit-lsp --target install
          - task: CMake@1
            displayName: Install swift-format
            inputs:
              cmakeArgs:
                --build $(Build.BinariesDirectory)/$(arch)/swift-format --target install
          - publish: $(Build.StagingDirectory)
            artifact: devtools-$(arch)

  - stage: auxtools
    dependsOn: [toolchain, sdk, devtools]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x86_64
              binDir: bin64
            'arm64':
              arch: arm64
              platform: aarch64
              binDir: bin64a
        steps:
          - download: current
            artifact: toolchain-amd64
            displayName: Download Compilers
          - download: current
            artifact: windows-sdk-$(arch)
            displayName: Download SDK ($(arch))
          - download: current
            artifact: windows-sdk-amd64
            displayName: Download SDK (Host)
            condition: and(succeeded(), ne(variables['arch'], 'amd64'))
          - download: current
            artifact: devtools-amd64
            displayName: Download devtools
          - download: current
            artifact: cmark-gfm-amd64-0.29.0.gfm.13
            displayName: Download cmark-gfm
          - task: PowerShell@2
            displayName: cmark-gfm Setup 
            inputs:
              targetType: 'inline'
              script: |
                Copy-Item $(Pipeline.Workspace)/cmark-gfm-amd64-0.29.0.gfm.13/usr/bin/*.dll $(Pipeline.Workspace)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/
          - checkout: apple/swift
            fetchDepth: 1
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $LibraryRoot = "$(Agent.BuildDirectory)/Library"
                $ToolchainInstallRoot = "$LibraryRoot/Developer/Toolchains/unknown-Asserts-development.xctoolchain"
                $PlatformInstallRoot = "$LibraryRoot/Developer/Platforms/Windows.platform"
                $SDKInstallRoot = "$PlatformInstallRoot/Developer/SDKs/Windows.sdk"
                $ToolchainBinaryCache = "$(Agent.BuildDirectory)/toolchain-amd64"
                $DevtoolsBinaryCache = "$(Agent.BuildDirectory)/devtools-amd64"
                $HostPlatformBinaryCache = "$(Agent.BuildDirectory)/windows-sdk-amd64"
                $PlatformBinaryCache = "$(Agent.BuildDirectory)/windows-sdk-$(arch)"

                $HostSDKSourceRoot = "$HostPlatformBinaryCache/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
                $SDKSourceRoot = "$PlatformBinaryCache/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"

                function Move-File($Src, $Dst) {
                  $DstDir = [IO.Path]::GetDirectoryName($Dst)
                  New-Item -ItemType Directory -ErrorAction Ignore $DstDir | Out-Null
                  Move-Item -Force $Src $Dst
                }

                function Move-Directory($Src, $Dst) {
                  New-Item -ItemType Directory -ErrorAction Ignore $Dst | Out-Null
                  Get-Item $Src | ForEach-Object {
                    $DstPath = Join-Path $Dst $_.Name
                    if (!(Test-Path -Path $DstPath)) {
                      Move-Item $_ $Dst
                    } else {
                      Get-ChildItem $_ -File | Move-Item -Force -Destination $DstPath
                      Get-ChildItem $_ -Directory | ForEach-Object { Move-Directory $_.FullName $DstPath }
                      Remove-Item $_
                    }
                  }
                }

                function Install-PlatformLibraries($Src, $Dst, $Platform) {
                  $LibSrc = "$Src/usr/lib/swift/windows"
                  $LibDst = "$Dst/usr/lib/swift/windows"
                  Move-File $LibSrc/*.lib $LibDst/$Platform/
                  Move-File $LibSrc/$Platform/*.lib $LibDst/$Platform/
                  Move-Directory $LibSrc/*.swiftmodule $LibDst

                  Get-ChildItem -Recurse $LibSrc/$Platform | ForEach-Object {
                    if (".swiftmodule", ".swiftdoc", ".swiftinterface" -contains $_.Extension) {
                      $DstDir = "$LibDst/$($_.BaseName).swiftmodule"
                      Move-File $_.FullName $DstDir/$Platform-unknown-windows-msvc$($_.Extension)
                    } else {
                      Move-File $_.FullName $LibDst/$Platform/
                    }
                  }
                }

                Remove-Item $LibraryRoot -Recurse -ErrorAction Ignore

                # Install toolchain
                #-----------------------------------------------------------------------------
                Write-Host "-- Installing compilers..."
                Move-Directory $ToolchainBinaryCache/Library/Developer $LibraryRoot
                Move-Directory $ToolchainInstallRoot/usr/lib/swift/_InternalSwiftScan $ToolchainInstallRoot/usr/include
                Move-File $ToolchainInstallRoot/usr/lib/swift/windows/_InternalSwiftScan.lib $ToolchainInstallRoot/usr/lib/
                Write-Host "-- Installing devtools..."
                Move-Directory $DevtoolsBinaryCache/Library/Developer $LibraryRoot
                Move-File $ToolchainInstallRoot/usr/bin/swift-driver.exe $ToolchainInstallRoot/usr/bin/swift.exe
                Copy-Item -Force $ToolchainInstallRoot/usr/bin/swift.exe $ToolchainInstallRoot/usr/bin/swiftc.exe

                # Install platform
                #-----------------------------------------------------------------------------
                Write-Host "-- Installing platforms..."
                Move-Directory $SDKSourceRoot/usr/include/swift/SwiftRemoteMirror $SDKInstallRoot/usr/include/swift
                Move-Directory $SDKSourceRoot/usr/lib/swift/shims $SDKInstallRoot/usr/lib/swift
                foreach ($Module in ("Block", "dispatch", "os")) {
                  Move-Directory $SDKSourceRoot/usr/lib/swift/$Module $SDKInstallRoot/usr/include
                }
                Move-File $SDKSourceRoot/usr/share/*.* $SDKInstallRoot/usr/share/

                if ($HostSDKSourceRoot -ne $SDKSourceRoot) {
                  Write-Host "     x86_64 (host)..."
                  Install-PlatformLibraries $HostSDKSourceRoot $SDKInstallRoot "x86_64"
                }

                Write-Host "     $platform..."
                Install-PlatformLibraries $SDKSourceRoot $SDKInstallRoot "$(platform)"

                Move-File $PlatformBinaryCache/Library/Developer/Platforms/Windows.platform/Info.plist $PlatformInstallRoot/
                Move-File $SDKSourceRoot/SDKSettings.plist $SDKInstallRoot/

                # Set up environment
                #-----------------------------------------------------------------------------
                Write-Host "##vso[task.prependpath]$(Agent.BuildDirectory)\windows-sdk-amd64\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk\usr\bin;$(Agent.BuildDirectory)\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin"
                Write-Host "##vso[task.setvariable variable=SDKROOT;]$(Agent.BuildDirectory)\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk"
          - script: |
              swift build -c release --triple $(platform)-unknown-windows-msvc -debug-info-format none --package-path $(Build.SourcesDirectory)/tools/swift-inspect --scratch-path $(Build.BinariesDirectory)/$(arch)/swift-inspect -Xcc -I%SDKROOT%\usr\include\swift\SwiftRemoteMirror -Xlinker %SDKROOT%\usr\lib\swift\windows\$(platform)\swiftRemoteMirror.lib
          - publish: $(Build.BinariesDirectory)/$(arch)/swift-inspect/release/swift-inspect.exe
            artifact: swift-inspect-$(arch)

  - stage: package_tools
    displayName: Tools MSIs
    dependsOn: [toolchain, devtools, auxtools]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: toolchain-$(arch)
              targetPath: '$(Pipeline.Workspace)/$(arch)'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: devtools-$(arch)
              targetPath: '$(Pipeline.Workspace)/$(arch)'
          - download: current
            artifact: swift-inspect-$(arch)
          - download: current
            artifact: cmark-gfm-$(arch)-0.29.0.gfm.13
            displayName: Download cmark-gfm
          - task: PowerShell@2
            displayName: cmark-gfm Setup 
            inputs:
              targetType: 'inline'
              script: |
                Copy-Item $(Pipeline.Workspace)/cmark-gfm-$(arch)-0.29.0.gfm.13/usr/bin/*.dll $(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate

          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/bld/bld.wixproj
              configuration: Release
              maximumCpuCount: true
              createLogFile: true
              msbuildArguments:
                -restore
                -maxCpuCount
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -p:DEVTOOLS_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:TOOLCHAIN_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-bld.binlog
          - publish: $(Agent.BuildDirectory)\installer\$(arch)-bld.binlog
            artifact: $(arch)-bld.binlog
            condition: failed()

          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/cli/cli.wixproj
              configuration: Release
              maximumCpuCount: true
              createLogFile: true
              msbuildArguments:
                -restore
                -maxCpuCount
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -p:DEVTOOLS_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:TOOLCHAIN_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-cli.binlog
          - publish: $(Agent.BuildDirectory)\installer\$(arch)-cli.binlog
            artifact: $(arch)-cli.binlog
            condition: failed()

          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/dbg/dbg.wixproj
              configuration: Release
              maximumCpuCount: true
              createLogFile: true
              msbuildArguments:
                -restore
                -maxCpuCount
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -p:DEVTOOLS_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:TOOLCHAIN_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:INCLUDE_SWIFT_INSPECT=true
                -p:SWIFT_INSPECT_BUILD=$(Pipeline.Workspace)/swift-inspect-$(arch)/
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-dbg.binlog
          - publish: $(Agent.BuildDirectory)\installer\$(arch)-dbg.binlog
            artifact: $(arch)-dbg.binlog
            condition: failed()

          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/ide/ide.wixproj
              configuration: Release
              maximumCpuCount: true
              createLogFile: true
              msbuildArguments:
                -restore
                -maxCpuCount
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -p:DEVTOOLS_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:TOOLCHAIN_ROOT=$(Pipeline.Workspace)/$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-ide.binlog
          - publish: $(Agent.BuildDirectory)\installer\$(arch)-ide.binlog
            displayName: Upload logs
            artifact: $(arch)-ide.binlog
            condition: failed()

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                New-Item -ItemType Directory -ErrorAction Ignore $(Build.StagingDirectory)/bld-$(arch)-msi | Out-Null
                New-Item -ItemType Directory -ErrorAction Ignore $(Build.StagingDirectory)/cli-$(arch)-msi | Out-Null
                New-Item -ItemType Directory -ErrorAction Ignore $(Build.StagingDirectory)/dbg-$(arch)-msi | Out-Null
                New-Item -ItemType Directory -ErrorAction Ignore $(Build.StagingDirectory)/ide-$(arch)-msi | Out-Null
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/bld.msi $(Build.StagingDirectory)/bld-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/bld.cab $(Build.StagingDirectory)/bld-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/cli.msi $(Build.StagingDirectory)/cli-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/cli.cab $(Build.StagingDirectory)/cli-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/dbg.msi $(Build.StagingDirectory)/dbg-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/dbg.cab $(Build.StagingDirectory)/dbg-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/ide.msi $(Build.StagingDirectory)/ide-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/ide.cab $(Build.StagingDirectory)/ide-$(arch)-msi/
          
          - publish: $(Build.StagingDirectory)/bld-$(arch)-msi
            artifact: bld-$(arch)-msi
          - publish: $(Build.StagingDirectory)/cli-$(arch)-msi
            artifact: cli-$(arch)-msi
          - publish: $(Build.StagingDirectory)/dbg-$(arch)-msi
            artifact: dbg-$(arch)-msi
          - publish: $(Build.StagingDirectory)/ide-$(arch)-msi
            artifact: ide-$(arch)-msi

  - stage: package_sdk_runtime
    displayName: SDK & Runtime MSIs
    dependsOn: [sdk]
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
              platform: x86
            'x64':
              arch: amd64
              platform: x64
            'arm64':
              arch: arm64
              platform: arm64
        steps:
          - download: current
            artifact: windows-sdk-$(arch)
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - script: |
              @echo ##vso[task.setvariable variable=VCToolsRedistDir;isOutput=true]%VCToolsRedistDir%
              @echo ##vso[task.setvariable variable=VSCMD_ARG_TGT_ARCH;isOutput=true]%VSCMD_ARG_TGT_ARCH%
            name: env
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/rtl/msi/rtlmsi.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: true
              msbuildArguments:
                -restore
                -maxCpuCount
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -p:PLATFORM_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform
                -p:SDK_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk
                -p:VCRedistDir="$(env.VCToolsRedistDir)\$(env.VSCMD_ARG_TGT_ARCH)\Microsoft.VC143.CRT"
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-rtl.binlog
          - publish: $(Agent.BuildDirectory)\installer\$(arch)-rtl.binlog
            artifact: $(arch)-rtl.binlog
            condition: failed()
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/sdk/sdk.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: false
              msbuildArguments:
                -restore
                -maxCpuCount
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:InstallerPlatform=$(platform)
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -p:PLATFORM_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform
                -p:SDK_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-sdk.binlog
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                New-Item -ItemType Directory -ErrorAction Ignore $(Build.StagingDirectory)/sdk-windows-$(arch)-msi | Out-Null
                New-Item -ItemType Directory -ErrorAction Ignore $(Build.StagingDirectory)/rtl-windows-$(arch)-msi | Out-Null
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/sdk.$(arch).msi $(Build.StagingDirectory)/sdk-windows-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/sdk.$(arch).cab $(Build.StagingDirectory)/sdk-windows-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/rtl.msi $(Build.StagingDirectory)/rtl-windows-$(arch)-msi/
                Move-Item $(Agent.BuildDirectory)/installer/Release/$(arch)/rtl.cab $(Build.StagingDirectory)/rtl-windows-$(arch)-msi/
          - publish: $(Agent.BuildDirectory)\installer\$(arch)-sdk.binlog
            artifact: $(arch)-sdk.binlog
            condition: failed()
          - publish: $(Build.StagingDirectory)/sdk-windows-$(arch)-msi
            artifact: sdk-windows-$(arch)-msi
          - publish: $(Build.StagingDirectory)/rtl-windows-$(arch)-msi
            artifact: rtl-windows-$(arch)-msi
          - publish: $(Agent.BuildDirectory)/installer/Release/$(arch)/rtl.$(arch).msm
            artifact: rtl-windows-$(arch)-msm

  - stage: installer
    dependsOn: [package_tools, package_sdk_runtime]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x64
            'arm64':
              arch: arm64
              platform: arm64
        steps:
          - download: current
            artifact: bld-$(arch)-msi
          - download: current
            artifact: cli-$(arch)-msi
          - download: current
            artifact: dbg-$(arch)-msi
          - download: current
            artifact: ide-$(arch)-msi
          - download: current
            artifact: rtl-windows-$(arch)-msi
          - download: current
            artifact: rtl-windows-amd64-msm
          - download: current
            artifact: rtl-windows-x86-msm
          - download: current
            artifact: rtl-windows-arm64-msm
          - download: current
            artifact: sdk-windows-amd64-msi
          - download: current
            artifact: sdk-windows-x86-msi
          - download: current
            artifact: sdk-windows-arm64-msi
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Pipeline.Workspace)
              Contents: |
                bld-$(arch)-msi/bld.msi
                bld-$(arch)-msi/bld.cab
                cli-$(arch)-msi/cli.msi
                cli-$(arch)-msi/cli.cab
                dbg-$(arch)-msi/dbg.msi
                dbg-$(arch)-msi/dbg.cab
                ide-$(arch)-msi/ide.msi
                ide-$(arch)-msi/ide.cab
                rtl-windows-$(arch)-msi/rtl.msi
                rtl-windows-$(arch)-msi/rtl.cab
              TargetFolder: $(Agent.BuildDirectory)/installer/Release/$(arch)/
              flattenFolders: true
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Pipeline.Workspace)
              Contents: |
                rtl-windows-x86-msm/rtl.x86.msm
                sdk-windows-x86-msi/sdk.x86.msi
                sdk-windows-x86-msi/sdk.x86.cab
              TargetFolder: $(Agent.BuildDirectory)/installer/Release/x86/
              flattenFolders: true
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Pipeline.Workspace)
              Contents: |
                rtl-windows-amd64-msm/rtl.amd64.msm
                sdk-windows-amd64-msi/sdk.amd64.msi
                sdk-windows-amd64-msi/sdk.amd64.cab
              TargetFolder: $(Agent.BuildDirectory)/installer/Release/amd64/
              flattenFolders: true
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Pipeline.Workspace)
              Contents: |
                rtl-windows-arm64-msm/rtl.arm64.msm
                sdk-windows-arm64-msi/sdk.arm64.msi
                sdk-windows-arm64-msi/sdk.arm64.cab
              TargetFolder: $(Agent.BuildDirectory)/installer/Release/arm64/
              flattenFolders: true
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -products * -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/shared/shared.wixproj
              configuration: Release
              maximumCpuCount: true
              createLogFile: true
              msbuildArguments:
                -restore
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}${{ parameters.BuildTag }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-shared.binlog
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/bundle/installer.wixproj
              configuration: Release
              maximumCpuCount: true
              createLogFile: true
              msbuildArguments:
                -restore
                -p:BaseOutputPath=$(Agent.BuildDirectory)\installer\
                -p:BuildProjectReferences=false
                -p:BundleFlavor=offline
                -p:ProductArchitecture=$(arch)
                -p:ProductVersion=${{ parameters.ProductVersion }}${{ parameters.BuildTag }}
                -p:CERTIFICATE=$(certificate.secureFilePath)
                -p:PASSPHRASE=$(CERTIFICATE_PASSWORD)
                -p:INCLUDE_AMD64_SDK=true
                -p:INCLUDE_X86_SDK=true
                -p:INCLUDE_ARM64_SDK=true
                -bl:$(Agent.BuildDirectory)\installer\$(arch)-ins.binlog
          - publish: $(Agent.BuildDirectory)\installer\$(arch)-ins.binlog
            artifact: $(arch)-ins.binlog
            condition: failed()
          - publish: $(Agent.BuildDirectory)/installer/Release/$(arch)/installer.exe
            artifact: installer-$(arch)
