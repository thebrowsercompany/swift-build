# Uploads a toolchain release's binary size metrics to DataDog.
#
# To target a specific Swift Toolchain Release, run:
#
#     gh workflow run release-binary-sizes -f version=$TOOLCHAIN_VERSION
#
#
name: Release - Binary Sizes

# TODO(kendal): Handle debug symbols for the toolchain.
# TODO(kendal): Convert the bloaty steps into a reusable workflow.
# TODO(kendal): Pin the bloaty version.
# TODO(kendal): Use on.releases.[created, edited]
# TODO(kendal): Support matrix.toolchain_arch=arm64

on:
  pull_request:

  workflow_dispatch:
    inputs:
      toolchain_version:
        description: 'The release version of the toolchain to use'
        required: false
        type: string
        default: ''

env:
  SOURCE_ROOT: ${{ github.workspace }}/source
  BUILD_ROOT: ${{ github.workspace }}/build
  # TODO(kendal): The default should be github.ref_name
  SWIFT_TOOLCHAIN_VERSION: ${{ github.events.inputs.toolchain_version || '20240412.2' }}

  # Bloaty vars
  BLOATY_CACHE_KEY: bloaty
  BLOATY_CACHE_PATH: cache/bin/bloaty

  # Binary size data
  BINARY_SIZES_PATH: ${{ github.workspace }}/binary_sizes.csv

jobs:
  bloaty:
    name: Build Bloaty
    runs-on: windows-latest

    steps:
      - name: Check the cache for bloaty
        id: cache
        uses: actions/cache@v4
        with:
          key: ${{ env.BLOATY_CACHE_KEY }}
          path: ${{ env.BLOATY_CACHE_PATH }}

      - name: Checkout google/bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/bloaty
          ref: refs/heads/main
          path: ${{ env.SOURCE_ROOT }}/bloaty
          show-progress: false

      # This step installs Ninja.
      - name: Setup VS dev environment.
        if: steps.cache.outputs.cache-hit != 'true'
        uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64'
          arch: amd64

      - name: Configure bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake -B ${{ env.BUILD_ROOT }}/bloaty -S ${{ env.SOURCE_ROOT }}/bloaty -G Ninja

      - name: Build bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake --build ${{ env.BUILD_ROOT }}/bloaty

      - name: Add bloaty to the cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          New-Item -Path ${{ env.BLOATY_CACHE_PATH }} -ItemType Directory -Force | Out-Null
          Copy-Item ${{ env.BUILD_ROOT }}/bloaty/bloaty.exe -Destination ${{ env.BLOATY_CACHE_PATH }}

  binary_size_data:
    name: Compute toolchain binary size data
    needs: [bloaty]
    runs-on: windows-latest
    env:
      BLOATY_OPTIONS_FILE: ${{ github.workspace }}/bloaty.textproto

    strategy:
      matrix:
        toolchain_arch: [amd64]

    steps:
      - name: Get bloaty from the cache
        uses: actions/cache/restore@v3
        with:
          key: ${{ env.BLOATY_CACHE_KEY }}
          path: ${{ env.BLOATY_CACHE_PATH }}

      - name: Install bloaty
        run: echo ${{ env.BLOATY_CACHE_PATH }} | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Swift toolchain
        uses: compnerd/gha-setup-swift@main
        with:
          github-repo: thebrowsercompany/swift-build
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-asset-name: installer-${{ matrix.toolchain_arch }}.exe
          release-tag-name: ${{ env.SWIFT_TOOLCHAIN_VERSION }}

      # For the options file schema, see https://github.com/google/bloaty/blob/main/src/bloaty.proto.
      - name: Generate bloaty options file
        run: |
          New-Item -Path ${{ env.BLOATY_OPTIONS_FILE }}

          # Generate the list of input files.
          # Each input filename must be an absolute path.
          # Unix-style path separators are required.
          Get-ChildItem -Recurse -Name -Path ${SwiftInstallRoot} -Include "*.dll","*.exe" | `
            %{ echo "filename: `"${SwiftInstallRoot}\$_`"" } | `
            %{ $_ -replace '\\','/' } | `
            # Text protos must be ascii encoded.
            Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii

          # Sort for consistent output.
          echo "sort_by: SORTBY_FILESIZE" | Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii

          # Specify which data sources to use.
          echo "data_source: `"inputfiles`"" | Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii
          echo "data_source: `"segments`"" | Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii

      - name: Show bloaty options file
        run: Get-Content -Path ${{ env.BLOATY_OPTIONS_FILE }}

      - name: Run bloaty
        # TODO(google/bloaty/issues/375): Bloaty accepts -n 0 but not max_rows_per_level: 0 in its config.
        run: bloaty -c ${{ env.BLOATY_OPTIONS_FILE }} -w -n 0 --csv | Out-File ${{ env.BINARY_SIZES_PATH }} -Encoding utf8

      - name: Upload binary size data
        uses: actions/upload-artifact@v4
        with:
          name: binary_size_data-${{ matrix.toolchain_arch }}
          path: ${{ env.BINARY_SIZES_PATH }}
          overwrite: true

      - name: Checkout swift-build
        uses: actions/checkout@v4
        with:
          path: ${{ env.SOURCE_ROOT }}/swift-build
          show-progress: false

      - name: Download binary size data
        uses: actions/download-artifact@v4
        with:
          name: binary_size_data-${{ matrix.toolchain_arch }}
          path: ${{ env.BINARY_SIZES_PATH }}

      - name: Install Python dependencies
        run: |
          pip install google-cloud-bigquery
          pip install google-auth-oathlib
          pip install pandas

      - name: Generate BigQuery table data
        run: |
          # Locate the toolchain installation <root> by walking up from
          # '<root>/Toolchains/<toolchain-version>/usr/bin/swift.exe'.
          $SwiftPath=$(Get-Command swift).Source
          $SwiftInstallRoot=${SwiftPath} | Split-Path | Split-Path | Split-Path | Split-Path | Split-Path

          $Script="${{ env.SOURCE_ROOT }}/swift-build/scripts/python/binary_sizes/generate_bigquery_table_data.py"
          python ${Script} ${{ env.BINARY_SIZES_PATH }} `
            ${{ github.workspace }}/bq_table_data.csv `
            --toolchain_version=${{ env.SWIFT_TOOLCHAIN_VERSION }} `
            --strip_inputfiles_prefix=${SwiftInstallRoot}
            --environment=ci

      - name: Show csv data to upload
        run: Get-Content -Path ${{ github.workspace }}/bq_table_data.csv

      - name: Authenticate to AWS
        # configure-aws-credentials v4.0.1 release
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a
        with:
          role-to-assume: ${{ secrets.SWIFT_TOOLCHAIN_UPLOADER_ROLE_ARN }}
          aws-region: us-east-2
          role-session-name: SwiftToolchainMetricsUploader

      - name: Get BigQuery Service Account Credentials
        uses: ./.github/actions/get-ssm-parameter
        with:
          ssm-parameter: "/shared/secrets/GITHUB_ACTIONS_BQ_DATA_UPLOAD"
          env-variable-name: "GOOGLE_APPLICATION_CREDENTIALS"

      - name: Upload to BigQuery
        run: |
          $Script="${{ env.SOURCE_ROOT }}/swift-build/scripts/python/binary_sizes/upload_csv_to_bigquery.py
          python ${Script} ${{ github.workspace }}/bq_table_data.csv
