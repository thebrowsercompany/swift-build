name: Swift Toolchain Build

on:
  workflow_call:
    inputs:
      build_os:
        required: true
        type: string

      build_arch:
        required: true
        type: string

      build_matrix:
        required: true
        type: string

      host_matrix:
        required: true
        type: string

      compilers_matrix:
        required: true
        type: string

      target_matrix:
        required: true
        type: string

      curl_revision:
        required: true
        type: string

      curl_version:
        required: true
        type: string

      ds2_revision:
        required: true
        type: string

      indexstore_db_revision:
        required: true
        type: string

      libxml2_revision:
        required: true
        type: string

      libxml2_version:
        required: true
        type: string

      llvm_project_revision:
        required: true
        type: string

      mimalloc_revision:
        required: true
        type: string

      sourcekit_lsp_revision:
        required: true
        type: string

      swift_argument_parser_revision:
        required: true
        type: string

      swift_asn1_revision:
        required: true
        type: string

      swift_atomics_revision:
        required: true
        type: string

      swift_build_revision:
        required: true
        type: string

      swift_certificates_revision:
        required: true
        type: string

      swift_cmark_revision:
        required: true
        type: string

      swift_cmark_version:
        required: true
        type: string

      swift_collections_revision:
        required: true
        type: string

      swift_corelibs_foundation_revision:
        required: true
        type: string

      swift_corelibs_libdispatch_revision:
        required: true
        type: string

      swift_corelibs_xctest_revision:
        required: true
        type: string

      swift_crypto_revision:
        required: true
        type: string

      swift_driver_revision:
        required: true
        type: string

      swift_experimental_string_processing_revision:
        required: true
        type: string

      swift_format_revision:
        required: true
        type: string

      swift_foundation_revision:
        required: true
        type: string

      swift_foundation_icu_revision:
        required: true
        type: string

      swift_installer_scripts_revision:
        required: true
        type: string

      swift_llbuild_revision:
        required: true
        type: string

      swift_lmdb_revision:
        required: true
        type: string

      swift_markdown_revision:
        required: true
        type: string

      swift_package_manager_revision:
        required: true
        type: string

      swift_revision:
        required: true
        type: string

      swift_subprocess_revision:
        required: true
        type: string

      swift_syntax_revision:
        required: true
        type: string

      swift_system_revision:
        required: true
        type: string

      swift_testing_revision:
        required: true
        type: string

      swift_toolchain_sqlite_revision:
        required: true
        type: string

      swift_toolchain_sqlite_version:
        required: true
        type: string

      swift_tools_support_core_revision:
        required: true
        type: string

      zlib_revision:
        required: true
        type: string

      zlib_version:
        required: true
        type: string

      ANDROID_API_LEVEL:
        required: true
        type: string

      ANDROID_NDK_VERSION:
        required: true
        type: string

      ANDROID_CLANG_VERSION:
        required: true
        type: string

      debug_info:
        required: true
        type: boolean
      
      release:
        required: true
        type: boolean

      signed:
        required: true
        type: boolean

      swift_version:
        required: true
        type: string

      swift_tag:
        required: true
        type: string

      default_build_runner:
        required: true
        type: string

      compilers_build_runner:
        required: true
        type: string

      build_android:
        required: false
        default: false
        type: boolean

      python_version:
        required: true
        type: string

    secrets:
      SYMBOL_SERVER_PAT:
        required: true
      CERTIFICATE:
        required: true
      PASSPHRASE:
        required: true
      R2_ACCOUNT_ID:
        required: true
      R2_ACCESS_KEY_ID:
        required: true
      R2_SECRET_ACCESS_KEY:
        required: true

env:
  PINNED_BOOTSTRAP_TOOLCHAIN_VERSION: 6.1.2

  # Workaround to build the early swift-driver without the workaround for the MSVC version.
  WORKAROUND_WINDOWS_EARLY_SWIFT_DRIVER_TOOLCHAIN_REPO: thebrowsercompany/swift-build
  WORKAROUND_WINDOWS_EARLY_SWIFT_DRIVER_TOOLCHAIN_VERSION: 6.2.0-20250630.0

defaults:
  run:
    shell: pwsh

permissions:
  id-token: write
  attestations: write

jobs:
  smoke_test:
    # TODO: Build this on macOS or make an equivalent Mac-only job
    if: inputs.build_os == 'Windows'
    runs-on: ${{ inputs.default_build_runner }}

    steps:
      - name: Download artifact from run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              $dest = '${{ github.workspace }}/tmp'
              New-Item -ItemType Directory -Force -Path $dest | Out-Null
              gh run download 17897150946 -n Windows-${{ inputs.build_arch }}-installer-online -R thebrowsercompany/swift-build --dir $dest


      # TODO(compnerd): migrate this to compnerd/gha-setup-swift after the work that @mangini is doing is completed
      - run: |
          function Update-EnvironmentVariables {
            foreach ($level in "Machine", "User") {
              [Environment]::GetEnvironmentVariables($level).GetEnumerator() | % {
                # For Path variables, append the new values, if they're not already in there
                if ($_.Name -Match 'Path$') {
                  $_.Value = ($((Get-Content "Env:$($_.Name)") + ";$($_.Value)") -Split ';' | Select -Unique) -Join ';'
                }
                $_
              } | Set-Content -Path { "Env:$($_.Name)" }
            }
          }

          try {
            Write-Host "Starting Install installer.exe..."
            $Process = Start-Process -FilePath ${{ github.workspace }}/tmp/installer.exe -ArgumentList ("-q") -Wait -PassThru
            $ExitCode = $Process.ExitCode
            if ($ExitCode -eq 0 -or $ExitCode -eq 3010) {
              Write-Host "Installation successful"
            } else {
              Write-Host "non-zero exit code returned by the installation process: $ExitCode"
              exit $ExitCode
            }
          } catch {
            Write-Host "Failed to install: $($_.Exception.Message)"
            exit 1
          }
          Update-EnvironmentVariables

          # Reset Path and environment
          echo "$env:Path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
          Get-ChildItem Env: | % { echo "$($_.Name)=$($_.Value)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }

      - uses: actions/checkout@v4.2.2
        with:
          repository: compnerd/swift-win32
          ref: refs/heads/main
          path: ${{ github.workspace }}/SourceCache/swift-win32
          show-progress: false

      - run: swift build
        working-directory: ${{ github.workspace }}/SourceCache/swift-win32

      - run: swift test -Xswiftc -DENABLE_TESTING
        working-directory: ${{ github.workspace }}/SourceCache/swift-win32

  smoke_test_android:
    # TODO: Run this job on macOS or make an equivalent Mac-only job
    if: inputs.build_os == 'Windows' && inputs.build_android
    runs-on: ${{ inputs.default_build_runner }}

    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64, aarch64 ]

    steps:
      - name: Download artifact from run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              $dest = '${{ github.workspace }}/tmp'
              New-Item -ItemType Directory -Force -Path $dest | Out-Null
              gh run download 17897150946 -n Windows-${{ inputs.build_arch }}-installer-online -R thebrowsercompany/swift-build --dir $dest

      # TODO(compnerd): migrate this to compnerd/gha-setup-swift after the work that @mangini is doing is completed
      - name: Install Swift SDK
        run: |
          function Update-EnvironmentVariables {
            foreach ($level in "Machine", "User") {
              [Environment]::GetEnvironmentVariables($level).GetEnumerator() | % {
                # For Path variables, append the new values, if they're not already in there
                if ($_.Name -Match 'Path$') {
                  $_.Value = ($((Get-Content "Env:$($_.Name)") + ";$($_.Value)") -Split ';' | Select -Unique) -Join ';'
                }
                $_
              } | Set-Content -Path { "Env:$($_.Name)" }
            }
          }

          try {
            Write-Host "Starting Install installer.exe..."
            $Process = Start-Process -FilePath ${{ github.workspace }}/tmp/installer.exe -ArgumentList ("-q") -Wait -PassThru
            $ExitCode = $Process.ExitCode
            if ($ExitCode -eq 0 -or $ExitCode -eq 3010) {
              Write-Host "Installation successful"
            } else {
              Write-Host "non-zero exit code returned by the installation process: $ExitCode"
              exit $ExitCode
            }
          } catch {
            Write-Host "Failed to install: $($_.Exception.Message)"
            exit 1
          }
          Update-EnvironmentVariables

          # Reset Path and environment
          echo "$env:Path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
          Get-ChildItem Env: | % { echo "$($_.Name)=$($_.Value)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }

      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ inputs.ANDROID_NDK_VERSION }}
          local-cache: true

      - name: Setup Swift environment
        id: android-swift-env
        run: |
          echo "sysroot=$(resolve-path ${{ steps.setup-ndk.outputs.ndk-path }}\toolchains\llvm\prebuilt\windows-x86_64\sysroot)" >> $env:GITHUB_OUTPUT
          echo "sdkroot=$(resolve-path $env:SDKROOT\..\..\..\..\Android.platform\Developer\SDKs\Android.sdk)" >> $env:GITHUB_OUTPUT
          echo "clang-resource-dir=$(& $(resolve-path "${{ steps.setup-ndk.outputs.ndk-path }}\toolchains\llvm\prebuilt\windows-x86_64\bin\clang.exe") -print-resource-dir)" >> $env:GITHUB_OUTPUT

      - name: Checkout cassowary project
        uses: actions/checkout@v4.2.2
        with:
          repository: compnerd/cassowary
          ref: 0.0.2
          path: ${{ github.workspace }}/SourceCache/cassowary

      - name: Build cassowary project
        run: |
          swift build `
            --package-path ${{ github.workspace }}/SourceCache/cassowary `
            --triple ${{ matrix.arch }}-unknown-linux-android${{ inputs.ANDROID_API_LEVEL }} `
            --sdk "${{ steps.android-swift-env.outputs.sysroot }}" `
            -Xswiftc -sdk -Xswiftc "${{ steps.android-swift-env.outputs.sdkroot }}" `
            -Xswiftc -sysroot -Xswiftc "${{ steps.android-swift-env.outputs.sysroot }}" `
            -Xswiftc -I -Xswiftc "${{ steps.android-swift-env.outputs.sdkroot }}\usr\include" `
            -Xswiftc -Xclang-linker -Xswiftc -resource-dir -Xswiftc -Xclang-linker -Xswiftc ${{ steps.android-swift-env.outputs.clang-resource-dir }}
